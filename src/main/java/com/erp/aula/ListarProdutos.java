package com.erp.aula;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
import java.sql.*;
import javax.swing.table.DefaultTableModel;
import java.awt.Component;
import java.awt.FlowLayout;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;


/**
 *
 * @author mary2
 */
public class ListarProdutos extends javax.swing.JFrame implements ActionListener {
    
    private JTable tabelaProdutos;
    private DefaultTableModel modeloTabela;
    

    /**
     * Creates new form ListagemProdutos
     */
    public ListarProdutos() {
        initComponents(); // PUXA O GUI AUTOMATICO
        setTitle("Lista de Produtos");
        setSize(759, 524);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        modeloTabela = (DefaultTableModel) jTable1.getModel();
        
        jTable1.setRowHeight(40); // ALTURA DA LINHA

        // Preencher a tabela com produtos
        carregarProdutos();
        
        configurarColunaAcoes();
        
         revalidate();
         repaint();
    }
    
    private void configurarColunaAcoes() {
        TableColumn colunaAcoes = jTable1.getColumnModel().getColumn(5);
        colunaAcoes.setCellRenderer(new ButtonRenderer());
        colunaAcoes.setCellEditor(new ButtonEditor(new JCheckBox()));
    }
    
    private void carregarProdutos() {
    modeloTabela.setRowCount(0); // Limpa todas as linhas da tabela
       
        String url = "jdbc:postgresql://localhost:5432/aula";
        String usuario = "postgres";
        String senha = "1234";
        
        try (Connection con = DriverManager.getConnection(url, usuario, senha)) {
            String sql = "SELECT * FROM produto";
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            
            while (rs.next()) {
                int id = rs.getInt("id");
                String nome = rs.getString("nome");
                double preco = rs.getDouble("preco");
                double custo = rs.getDouble("custo");
                int estoque = rs.getInt("estoque");
                
modeloTabela.insertRow(0, new Object[]{id, nome, preco, custo, estoque, "Ações"});
            }
            
            jTable1.getColumnModel().getColumn(0).setMinWidth(0);
        jTable1.getColumnModel().getColumn(0).setMaxWidth(0);
        jTable1.getColumnModel().getColumn(0).setPreferredWidth(0);
        
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro ao carregar produtos: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    public void excluirProdutoDoBanco(int produtoId, int row) {
    String url = "jdbc:postgresql://localhost:5432/aula";
    String usuario = "postgres";
    String senha = "1234";

    try (Connection conn = DriverManager.getConnection(url, usuario, senha)) {
        String sql = "DELETE FROM produto WHERE id = ?";
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, produtoId);
            stmt.executeUpdate();
            modeloTabela.removeRow(row); // REMOVER A LINHA DA TABELA
            JOptionPane.showMessageDialog(this, "Produto excluído com sucesso!");
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Erro ao excluir produto: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
    }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {//GEN-BEGIN:initComponents

        jScrollPane1 = new JScrollPane();
        jTable1 = new JTable();
        jLayeredPane1 = new JLayeredPane();
        Retornar1Button = new JToggleButton();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        jTable1.setModel(new DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "id", "Nome do Produto", "Preço", "Custo", "Estoque", "Ações"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(0);
        }

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(0, 0, 760, 370);

        Retornar1Button.setText("Retornar");
        Retornar1Button.addActionListener(this);

        jLayeredPane1.setLayer(Retornar1Button, JLayeredPane.DEFAULT_LAYER);

        GroupLayout jLayeredPane1Layout = new GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(jLayeredPane1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap(618, Short.MAX_VALUE)
                .addComponent(Retornar1Button, GroupLayout.PREFERRED_SIZE, 111, GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );
        jLayeredPane1Layout.setVerticalGroup(jLayeredPane1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap(388, Short.MAX_VALUE)
                .addComponent(Retornar1Button)
                .addGap(109, 109, 109))
        );

        getContentPane().add(jLayeredPane1);
        jLayeredPane1.setBounds(0, 0, 760, 520);

        pack();
    }

    // Code for dispatching events from components to event handlers.

    public void actionPerformed(ActionEvent evt) {
        if (evt.getSource() == Retornar1Button) {
            ListarProdutos.this.Retornar1ButtonActionPerformed(evt);
        }
    }//GEN-END:initComponents

    private void Retornar1ButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_Retornar1ButtonActionPerformed
        this.dispose(); // Fecha a tela atual
        new CadastroProduto().setVisible(true); // VOLTAR PRA TELA DE CADASTRO DE PRODUTOS
    }//GEN-LAST:event_Retornar1ButtonActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ListarProdutos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ListarProdutos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ListarProdutos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ListarProdutos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ListarProdutos().setVisible(true);
            }
        });
    }
    
    class ButtonRenderer extends JPanel implements TableCellRenderer {

    public ButtonRenderer() {
        setLayout(new FlowLayout());
        JButton editButton = new JButton("Editar");
        JButton deleteButton = new JButton("Excluir");
        add(editButton);
        add(deleteButton);
    }

    @Override
    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected,
                                                   boolean hasFocus, int row, int column) {
        return this;
    }
}

class ButtonEditor extends DefaultCellEditor {
    protected JPanel panel;
    private JButton editButton, deleteButton;   

    public ButtonEditor(JCheckBox checkBox) {
        super(checkBox);
        panel = new JPanel(new FlowLayout());

        editButton = new JButton("Editar");
        editButton.addActionListener(e -> {
    int row = jTable1.getSelectedRow();
    if (row >= 0) {
        // Obtém os dados da linha selecionada
        int id = (int) jTable1.getValueAt(row, 0);  // ID do produto
        String nome = (String) jTable1.getValueAt(row, 1);  // Nome do produto
        double preco = (double) jTable1.getValueAt(row, 2);  // Preço
        double custo = (double) jTable1.getValueAt(row, 3);  // Custo
        int estoque = (int) jTable1.getValueAt(row, 4);  // Estoque

        CadastroProduto cadastroProduto = new CadastroProduto();
        cadastroProduto.preencherCampos(id, nome, preco, custo, estoque);

        cadastroProduto.setVisible(true);

        // Fecha a tela atual (ListarProdutos)
        ListarProdutos.this.dispose();
    } else {
        JOptionPane.showMessageDialog(panel, "Selecione um produto para editar!", "Erro", JOptionPane.ERROR_MESSAGE);
    }
});

        deleteButton = new JButton("Excluir");
        deleteButton.addActionListener(e -> {
            int row = jTable1.getSelectedRow();
            if (row >= 0) {
                int produtoId = (int) jTable1.getValueAt(row, 0);  
        excluirProdutoDoBanco(produtoId, row);
        } else {
        JOptionPane.showMessageDialog(panel, "Selecione um produto para excluir!", "Erro", JOptionPane.ERROR_MESSAGE);
    }
});

        panel.add(editButton);
        panel.add(deleteButton);
    }

    @Override
    public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
        return panel;
    }

    @Override
    public Object getCellEditorValue() {
        return "";
    }

    private int getTableRow() {
        JTable table = (JTable) SwingUtilities.getAncestorOfClass(JTable.class, panel);
        return table != null ? table.getEditingRow() : -1;
    }
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JToggleButton Retornar1Button;
    private JLayeredPane jLayeredPane1;
    private JScrollPane jScrollPane1;
    private JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
