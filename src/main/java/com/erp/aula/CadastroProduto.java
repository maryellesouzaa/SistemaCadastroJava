package com.erp.aula;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.LayoutStyle;
import javax.swing.WindowConstants;
import com.erp.aula.CadastroPessoa;
import entidades.Produto;
import entidades.ProdutoService;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;



/**
 *
 * @author mary2
 */
public class CadastroProduto extends javax.swing.JFrame implements ActionListener {
    
    private static final String DB_CADASTRO_PRODUTO = "jdbc:postgresql://localhost:5432/aula";
    private static final String DB_USER = "postgres";
    private static final String DB_PASSWORD = "1234";

    private ProdutoService produtoService;

    /**
     * Creates new form CadastroProduto
     */
   public CadastroProduto() {
    super();
    initComponents();
    produtoService = new ProdutoService();
    produtoEditando = new Produto();

}


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {//GEN-BEGIN:initComponents

        jLabel1 = new JLabel();
        jLabel2 = new JLabel();
        jLabel7 = new JLabel();
        jLabel8 = new JLabel();
        nomeTextField = new JTextField();
        precoTextField = new JTextField();
        custoTextField = new JTextField();
        estoqueTextField = new JTextField();
        retornarButton = new JButton();
        salvarButton = new JButton();
        listarprodutosButton = new JButton();
        jLabel3 = new JLabel();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Nome:");

        jLabel2.setText("Pre√ßo:");

        jLabel7.setText("Custo:");

        jLabel8.setText("Estoque:");

        nomeTextField.addActionListener(this);

        precoTextField.addActionListener(this);

        custoTextField.addActionListener(this);

        estoqueTextField.addActionListener(this);

        retornarButton.setText("Retornar");
        retornarButton.addActionListener(this);

        salvarButton.setText("Salvar");
        salvarButton.addActionListener(this);

        listarprodutosButton.setText("Listar Produtos");
        listarprodutosButton.addActionListener(this);

        jLabel3.setText("Cadastro de Produtos");

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, GroupLayout.PREFERRED_SIZE, 37, GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, GroupLayout.PREFERRED_SIZE, 37, GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, GroupLayout.PREFERRED_SIZE, 37, GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, GroupLayout.PREFERRED_SIZE, 71, GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                            .addComponent(nomeTextField, GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
                            .addComponent(precoTextField)
                            .addComponent(custoTextField)
                            .addComponent(estoqueTextField)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(142, 142, 142)
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(84, 84, 84)
                        .addComponent(retornarButton)
                        .addGap(18, 18, 18)
                        .addComponent(salvarButton)
                        .addGap(18, 18, 18)
                        .addComponent(listarprodutosButton)))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel3)
                .addGap(73, 73, 73)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(nomeTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(58, 58, 58)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(185, 264, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(listarprodutosButton)
                            .addComponent(salvarButton)
                            .addComponent(retornarButton))
                        .addGap(25, 25, 25))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(precoTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                        .addGap(58, 58, 58)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(custoTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addGap(58, 58, 58)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(estoqueTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }

    // Code for dispatching events from components to event handlers.

    public void actionPerformed(ActionEvent evt) {
        if (evt.getSource() == nomeTextField) {
            CadastroProduto.this.nomeTextFieldActionPerformed(evt);
        }
        else if (evt.getSource() == precoTextField) {
            CadastroProduto.this.precoTextFieldActionPerformed(evt);
        }
        else if (evt.getSource() == custoTextField) {
            CadastroProduto.this.custoTextFieldActionPerformed(evt);
        }
        else if (evt.getSource() == estoqueTextField) {
            CadastroProduto.this.estoqueTextFieldActionPerformed(evt);
        }
        else if (evt.getSource() == salvarButton) {
            CadastroProduto.this.salvarButtonActionPerformed(evt);
        }
        else if (evt.getSource() == listarprodutosButton) {
            CadastroProduto.this.listarprodutosButtonActionPerformed(evt);
        }
        else if (evt.getSource() == retornarButton) {
            CadastroProduto.this.retornarButtonActionPerformed(evt);
        }
    }//GEN-END:initComponents
    
    // Preencher os campos com os dados do produto
private Produto produtoEditando;
public void preencherCampos(int id, String nome, double preco, double custo, int estoque) {
    nomeTextField.setText(nome);
    precoTextField.setText(String.valueOf(preco));
    custoTextField.setText(String.valueOf(custo));
    estoqueTextField.setText(String.valueOf(estoque));
    
    produtoEditando = new Produto();
    produtoEditando.setId(id);
    produtoEditando.setNome(nome);
    produtoEditando.setPreco(preco);
    produtoEditando.setCusto(custo);
    produtoEditando.setEstoque(estoque);
}

    private boolean validarCampos() {
        if (nomeTextField.getText().isEmpty() || precoTextField.getText().isEmpty() ||
            custoTextField.getText().isEmpty() || estoqueTextField.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, preencha todos os campos.");
            return false;
        }
        return true;
    }
    
    private void salvarProduto(Produto produto) {
        try (Connection connection = DriverManager.getConnection(DB_CADASTRO_PRODUTO, DB_USER, DB_PASSWORD)) {
 String query;
        if (produto.getId() == 0) {
            // SE FOR PRODUTO NOVO
            query = "INSERT INTO produto (nome, preco, custo, estoque) VALUES (?, ?, ?, ?)";
        } else {
            // ATUALIZA SE FOR PRODUTO EXISTENTE
            query = "UPDATE produto SET nome = ?, preco = ?, custo = ?, estoque = ? WHERE id = ?";
        }            try (PreparedStatement stmt = connection.prepareStatement(query)) {
                stmt.setString(1, produto.getNome());
                stmt.setDouble(2, produto.getPreco());
                stmt.setDouble(3, produto.getCusto());
                stmt.setInt(4, produto.getEstoque());
                
                if (produto.getId() != 0) {
                stmt.setInt(5, produto.getId());  // passa o id para atualiza√ß√£o SE PRODUTO EXISTENTE
            }

                stmt.executeUpdate();
                JOptionPane.showMessageDialog(this, "Produto salvo com sucesso!");
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Erro ao salvar produto no banco: " + e.getMessage());
        }
    }
    private void salvarButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_salvarButtonActionPerformed
    try {
        if (!validarCampos()) {
            return;
        }
        
        String nome = nomeTextField.getText();
        double preco = Double.parseDouble(precoTextField.getText());
        double custo = Double.parseDouble(custoTextField.getText());
        int estoque = Integer.parseInt(estoqueTextField.getText());
        
        produtoEditando.setNome(nome);
        produtoEditando.setPreco(preco);
        produtoEditando.setCusto(custo);
        produtoEditando.setEstoque(estoque);
        
        if (produtoEditando.getId() == 0) {
            produtoService.salvarProduto(produtoEditando);
            JOptionPane.showMessageDialog(this, "Produto salvo com sucesso!");
        } else {
            produtoService.atualizarProduto(produtoEditando);
            JOptionPane.showMessageDialog(this, "Produto atualizado com sucesso!");
}
            
            limparCampos();
            produtoEditando = new Produto();
        
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Erro ao converter valores num√©ricos: " + e.getMessage());
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Erro ao salvar produto: " + e.getMessage());
    }
}

        private void limparCampos() {
        nomeTextField.setText("");
        precoTextField.setText("");
        custoTextField.setText("");
        estoqueTextField.setText("");
    }//GEN-LAST:event_salvarButtonActionPerformed

    private void nomeTextFieldActionPerformed(ActionEvent evt) {//GEN-FIRST:event_nomeTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nomeTextFieldActionPerformed

    private void precoTextFieldActionPerformed(ActionEvent evt) {//GEN-FIRST:event_precoTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_precoTextFieldActionPerformed

    private void custoTextFieldActionPerformed(ActionEvent evt) {//GEN-FIRST:event_custoTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_custoTextFieldActionPerformed

    private void estoqueTextFieldActionPerformed(ActionEvent evt) {//GEN-FIRST:event_estoqueTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_estoqueTextFieldActionPerformed

    private void listarprodutosButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_listarprodutosButtonActionPerformed
        new ListarProdutos().setVisible(true);
        dispose();
    }//GEN-LAST:event_listarprodutosButtonActionPerformed

    private void retornarButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_retornarButtonActionPerformed
 this.dispose(); // Fecha a tela atual
    new Login().setVisible(true); // Vai para a tela de login
    }//GEN-LAST:event_retornarButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CadastroProduto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CadastroProduto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CadastroProduto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CadastroProduto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CadastroProduto().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JTextField custoTextField;
    private JTextField estoqueTextField;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JLabel jLabel3;
    private JLabel jLabel7;
    private JLabel jLabel8;
    private JButton listarprodutosButton;
    private JTextField nomeTextField;
    private JTextField precoTextField;
    private JButton retornarButton;
    private JButton salvarButton;
    // End of variables declaration//GEN-END:variables
}
